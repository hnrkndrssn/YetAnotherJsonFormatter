name: Continuous Integration

on:
  pull_request:
    branches: 
      - '*'
    paths:
      - "/src"
      - ".github/workflows/**"
  push:
    branches: 
      - master
    paths:
      - "/src"
      - ".github/workflows/**"

env:
  AZURE_FUNCTION_APP_NAME: 'YetAnotherJsonFormatter'
  NODE_WEBAPP_PACKAGE_PATH: './src/yet-another-online-jsonviewer-app'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './src/YetAnotherJsonFormatter'
  ARTIFACTS_PATH: '${{ github.workspace }}/artifacts'
  DOTNET_VERSION: '3.1.100'
  NODE_VERSION: '12.x'
  WEB_APP_PACKAGE_NAME: "yajsonfmt.web"
  WEB_API_PACKAGE_NAME: "yajsonfmt.api"
  OCTOPUS_PROJECT_NAME: "yajsonfmt app"
  CI: true

jobs:

  git-version:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --unshallow

      - run: mkdir -p '${{ github.workspace }}/gitversion'

      - name: Calculate version
        uses: docker://gittools/gitversion:latest-linux
        with:
          args: /github/workspace /nofetch /exec /bin/sh /execargs "-c \"echo $GitVersion_FullSemVer > /github/workspace/gitversion/version.txt && echo $GitVersion_InformationalVersion > /github/workspace/gitversion/informationalversion.txt\""

      - name: persist version file
        uses: actions/upload-artifact@v1
        with:
          name: gitversion
          path: '${{ github.workspace }}/gitversion'

  build-web-app:
    runs-on: ubuntu-latest

    needs: git-version

    steps:
      - uses: actions/checkout@v2

      - name: Get gitversion artifact
        uses: actions/download-artifact@v1
        with:
          name: gitversion

      - run: echo "::set-env name=GITVERSION_FULLSEMVER::$(cat gitversion/version.txt)"
      - run: mkdir -p ${{ env.NODE_WEBAPP_PACKAGE_PATH }}/dist

      - name: Setup Node to use ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: npm install, lint and build
        run: |
          pushd ${{ env.NODE_WEBAPP_PACKAGE_PATH }}
          npm install
          npm run lint
          npm version ${{ env.GITVERSION_FULLSEMVER }}
          npm run build -- --dest ./dist
          npm run test --if-present
          popd

      - name: persist web app artifact
        uses: actions/upload-artifact@v1
        with:
          name: web-app
          path: '${{ env.NODE_WEBAPP_PACKAGE_PATH }}/dist'

  build-web-api:
    runs-on: ubuntu-latest

    needs: git-version

    steps:
      - uses: actions/checkout@v2

      - name: Get gitversion artifact
        uses: actions/download-artifact@v1
        with:
          name: gitversion

      - run: echo "::set-env name=GITVERSION_FULLSEMVER::$(cat gitversion/version.txt)"
      - run: echo "::set-env name=GITVERSION_INFORMATIONALVERSION::$(cat gitversion/informationalversion.txt)"
      - run: mkdir -p ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/publish

      - name: Setup .NET Core to use ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: dotnet build and publish
        run: |
          pushd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          dotnet build --configuration Release
          dotnet publish --configuration Release -p:Version=${{ env.GITVERSION_FULLSEMVER }} -p:InformationalVersion=${{ env.GITVERSION_INFORMATIONALVERSION }} -o ./publish/${{ env.AZURE_FUNCTION_APP_NAME }}
          popd

      - name: presist web api artifact
        uses: actions/upload-artifact@v1
        with:
          name: web-api
          path: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/publish'
  
  publish-packages:
      runs-on: ubuntu-latest

      needs: [build-web-app, build-web-api]

      steps:
        - run: mkdir -p ${{ env.ARTIFACTS_PATH }}

        - name: Get gitversion artifact
          uses: actions/download-artifact@v1
          with:
            name: gitversion

        - run: echo "::set-env name=GITVERSION_FULLSEMVER::$(cat gitversion/version.txt)"

        - name: Get web app artifact
          uses: actions/download-artifact@v1
          with: 
            name: web-app
            path: ${{ env.ARTIFACTS_PATH }}/web-app

        - name: Get web api artifact
          uses: actions/download-artifact@v1
          with:
            name: web-api
            path: ${{ env.ARTIFACTS_PATH }}/web-api

        - name: Pack web app
          uses: hnrkndrssn/actions/octopus/pack@master
          with:
            package_id: '${{ env.WEB_APP_PACKAGE_NAME }}'
            version: '${{ env.GITVERSION_FULLSEMVER }}'
            base_path: './artifacts/web-app'
            out_folder: './artifacts'
            format: 'Zip'
            overwrite: true

        - name: Pack web api
          uses: hnrkndrssn/actions/octopus/pack@master
          with:
            package_id: '${{ env.WEB_API_PACKAGE_NAME }}'
            version: '${{ env.GITVERSION_FULLSEMVER }}'
            base_path: './artifacts/web-api'
            out_folder: './artifacts'
            format: 'Zip'
            overwrite: true
        
        - name: Push to Octopus
          uses: hnrkndrssn/actions/octopus/push@master
          with:
            package: './artifacts/*.zip'
            octopus_server: ${{ secrets.OCTOPUS_URL }}
            octopus_api_key: ${{ secrets.OCTOPUS_API_KEY }}
            overwrite_mode: 'IgnoreIfExists'
        
        - name: Create release ${{ env.GITVERSION_FULLSEMVER }}
          uses: hnrkndrssn/actions/octopus/create-release@master
          with:
            project: ${{ env.OCTOPUS_PROJECT_NAME }}
            release_number: ${{ env.GITVERSION_FULLSEMVER }}
            deploy_to: 'Dev'
            progress: true
            wait_for_deployment: true
            octopus_server: ${{ secrets.OCTOPUS_URL }}
            octopus_api_key: ${{ secrets.OCTOPUS_API_KEY }}